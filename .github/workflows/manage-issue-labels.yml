name: Manage Issue Labels

on:
  workflow_dispatch:  # Manual trigger for testing
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes

# Add explicit permissions
permissions:
  contents: read
  issues: write

jobs:
  manage-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Project Info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Attempting to list available projects");
            
            try {
              // Try to list all projects accessible to the token
              const viewerQuery = `
                query {
                  viewer {
                    login
                    projectsV2(first: 10) {
                      nodes {
                        number
                        title
                        url
                      }
                    }
                  }
                }
              `;
              
              const viewerResult = await github.graphql(viewerQuery);
              console.log("Authenticated user:", viewerResult.viewer.login);
              console.log("Available projects:", JSON.stringify(viewerResult.viewer.projectsV2.nodes, null, 2));
            } catch (error) {
              console.error("Error listing projects:", error.message);
            }

      - name: Find issues in "In Progress" and update labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Starting label management workflow");
            
            // First let's try to get all repositories for the authenticated user
            try {
              const reposQuery = `
                query {
                  viewer {
                    repositories(first: 10) {
                      nodes {
                        name
                        url
                        issues(first: 10, states: OPEN) {
                          nodes {
                            number
                            title
                            labels(first: 10) {
                              nodes {
                                name
                              }
                            }
                            projectItems(first: 10) {
                              nodes {
                                project {
                                  title
                                  url
                                }
                                fieldValues(first: 10) {
                                  nodes {
                                    ... on ProjectV2ItemFieldSingleSelectValue {
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const reposResult = await github.graphql(reposQuery);
              console.log("Repositories found:", reposResult.viewer.repositories.nodes.length);
              
              // Process each repository
              for (const repo of reposResult.viewer.repositories.nodes) {
                console.log(`Checking repository: ${repo.name}`);
                
                // Process each issue in this repository
                for (const issue of repo.issues.nodes) {
                  console.log(`Checking issue #${issue.number}: ${issue.title}`);
                  
                  // Check if this issue is in a project with "In Progress" status
                  let isInProgress = false;
                  let projectTitle = "";
                  
                  // Check each project this issue is in
                  for (const projectItem of issue.projectItems.nodes) {
                    // Check field values for this project item
                    for (const fieldValue of projectItem.fieldValues.nodes) {
                      if (fieldValue.name && fieldValue.name.toLowerCase() === 'in progress') {
                        isInProgress = true;
                        projectTitle = projectItem.project.title;
                        break;
                      }
                    }
                    
                    if (isInProgress) break;
                  }
                  
                  if (!isInProgress) {
                    console.log(`Issue #${issue.number} is not in "In Progress" status`);
                    continue;
                  }
                  
                  console.log(`Issue #${issue.number} is in "In Progress" status in project "${projectTitle}"`);
                  
                  // Get current labels
                  const currentLabels = issue.labels.nodes.map(label => label.name);
                  console.log(`Current labels: ${currentLabels.join(', ')}`);
                  
                  // Filter to keep only "bug" label if present
                  const keepLabels = currentLabels.filter(label => label === "bug");
                  
                  // Add "documentation" label if not already present
                  if (!keepLabels.includes("documentation")) {
                    keepLabels.push("documentation");
                  }
                  
                  // Skip if labels are unchanged
                  if (currentLabels.length === keepLabels.length && 
                      currentLabels.every(label => keepLabels.includes(label))) {
                    console.log(`Labels already correct for issue #${issue.number}, skipping update`);
                    continue;
                  }
                  
                  console.log(`Updating labels for issue #${issue.number} to: ${keepLabels.join(', ')}`);
                  
                  // Update issue with the new set of labels
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: repo.name,
                    issue_number: issue.number,
                    labels: keepLabels
                  });
                  
                  console.log(`Successfully updated labels for issue #${issue.number}`);
                }
              }
            } catch (error) {
              console.error(`Error processing repositories: ${error.message}`);
              console.error(error.stack);
            }