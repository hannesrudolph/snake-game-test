name: Manage Issue Labels

on:
  workflow_dispatch:  # Manual trigger for testing
  issues:
    types: [labeled, unlabeled]  # Trigger on label changes

# Add explicit permissions
permissions:
  contents: read
  issues: write

jobs:
  manage-labels-on-status-change:
    runs-on: ubuntu-latest
    steps:
      - name: Check and update issue labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) {
              console.log('Not an issue event, skipping.');
              return;
            }
            
            const issueNumber = issue.number;
            
            // Get the issue details to check project status
            const fullIssue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            // Function to check if issue is in "In Progress" in any project
            async function isIssueInProgress() {
              // Using the GraphQL API to get project info
              const query = `
                query GetIssueProjectStatus($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          project {
                            title
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              try {
                const result = await github.graphql(query, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issueNumber: issueNumber
                });
                
                const projectItems = result.repository.issue.projectItems.nodes;
                
                // Check each project the issue is in
                for (const item of projectItems) {
                  // Check each field value to find status fields
                  const fieldValues = item.fieldValues.nodes;
                  for (const fieldValue of fieldValues) {
                    // Check if this is a status field and has value "In Progress"
                    if (fieldValue.field && 
                        fieldValue.field.name.toLowerCase().includes('status') && 
                        fieldValue.name.toLowerCase() === 'in progress') {
                      console.log(`Issue #${issueNumber} is in "In Progress" status in project "${item.project.title}"`);
                      return true;
                    }
                  }
                }
                
                console.log(`Issue #${issueNumber} is not in "In Progress" status in any project`);
                return false;
              } catch (error) {
                console.error(`Error checking project status: ${error.message}`);
                return false;
              }
            }
            
            // Check if the issue is in "In Progress" status
            const inProgress = await isIssueInProgress();
            if (!inProgress) {
              console.log(`Issue #${issueNumber} is not in "In Progress" status, skipping label management`);
              return;
            }
            
            console.log(`Issue #${issueNumber} is in "In Progress" status, managing labels...`);
            
            // Get current labels
            const existingLabels = fullIssue.data.labels.map(label => 
              typeof label === 'object' ? label.name : label
            );
            
            // Filter to keep only "bug" label if present
            const keepLabels = existingLabels.filter(label => label === "bug");
            
            // Add "documentation" label if not already present
            if (!keepLabels.includes("documentation")) {
              keepLabels.push("documentation");
            }
            
            // Update issue with the new set of labels
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: keepLabels
            });
            
            console.log(`Updated issue #${issueNumber} labels to: ${keepLabels.join(", ")}`);