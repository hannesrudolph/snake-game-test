name: Manage Issue Labels

on:
  # Run periodically to check for issues in "In Progress"
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  # Manual trigger for testing
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  manage-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Check for issues in "In Progress" and manage labels
        uses: actions/github-script@v7
        with:
          # Using GITHUB_TOKEN will have limited project visibility
          # If this doesn't work, you'll need to use a Personal Access Token (PAT)
          # with broader permissions (repo, project, and user:read scopes)
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Starting to check for issues in 'In Progress' status");
            
            // First get all open issues in this repository
            const { data: allIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`Found ${allIssues.length} open issues`);
            
            // Various possible "In Progress" status values to check
            const inProgressValues = [
              'in progress', 
              'in-progress', 
              'inprogress', 
              'doing',
              'active',
              'started'
            ];
            
            async function getIssueWithProjectStatus(issueNumber) {
              try {
                // Using GraphQL to get project data efficiently
                const query = `
                  query GetIssueWithProjects($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $number) {
                        number
                        title
                        
                        # For GitHub Projects v2
                        projectItems(first: 20) {
                          nodes {
                            project {
                              title
                              url
                            }
                            fieldValues(first: 20) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        
                        # For classic GitHub Projects
                        projectCards(first: 20) {
                          nodes {
                            column {
                              name
                            }
                            project {
                              name
                              url
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const result = await github.graphql(query, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: issueNumber
                });
                
                return result.repository.issue;
              } catch (error) {
                console.error(`Error fetching project data for issue #${issueNumber}: ${error.message}`);
                return null;
              }
            }
            
            // Process each issue
            for (const issue of allIssues) {
              const issueNumber = issue.number;
              
              // Skip pull requests
              if (issue.pull_request) continue;
              
              console.log(`\nChecking issue #${issueNumber}: ${issue.title}`);
              
              // Get detailed project data for this issue
              const issueWithProjectData = await getIssueWithProjectStatus(issueNumber);
              
              if (!issueWithProjectData) {
                console.log(`Could not get project data for issue #${issueNumber}`);
                continue;
              }
              
              // Check if issue is in "In Progress" in any project
              let isInProgress = false;
              let projectInfo = '';
              
              // Check GitHub Projects v2
              for (const projectItem of issueWithProjectData.projectItems.nodes) {
                for (const fieldValue of projectItem.fieldValues.nodes) {
                  if (fieldValue.field && fieldValue.name) {
                    const fieldName = fieldValue.field.name.toLowerCase();
                    const valueName = fieldValue.name.toLowerCase();
                    
                    // Log for debugging
                    console.log(`  Project: ${projectItem.project.title}`);
                    console.log(`  Field: ${fieldName}`);
                    console.log(`  Value: ${valueName}`);
                    
                    // Check if this is a status/state field with an "in progress" value
                    if ((fieldName.includes('status') || fieldName === 'state') && 
                        inProgressValues.includes(valueName)) {
                      isInProgress = true;
                      projectInfo = `${projectItem.project.title} (${valueName})`;
                      break;
                    }
                  }
                }
                if (isInProgress) break;
              }
              
              // If not found in Projects v2, check classic projects
              if (!isInProgress) {
                for (const card of issueWithProjectData.projectCards.nodes) {
                  if (card.column && card.column.name) {
                    const columnName = card.column.name.toLowerCase();
                    console.log(`  Classic Project: ${card.project.name}`);
                    console.log(`  Column: ${columnName}`);
                    
                    if (inProgressValues.includes(columnName)) {
                      isInProgress = true;
                      projectInfo = `${card.project.name} (${columnName})`;
                      break;
                    }
                  }
                }
              }
              
              if (!isInProgress) {
                console.log(`Issue #${issueNumber} is not in "In Progress" status in any project`);
                continue;
              }
              
              console.log(`Issue #${issueNumber} is in "In Progress" status in ${projectInfo}`);
              
              // Get current labels
              const currentLabels = issue.labels.map(label => 
                typeof label === 'object' ? label.name : label
              );
              
              console.log(`Current labels: ${currentLabels.join(', ') || 'none'}`);
              
              // Filter to keep only "bug" label if present
              const keepLabels = currentLabels.filter(label => label === "bug");
              
              // Add "documentation" label if not already present
              if (!keepLabels.includes("documentation")) {
                keepLabels.push("documentation");
              }
              
              // Check if labels would change
              const wouldChange = currentLabels.length !== keepLabels.length || 
                                 !currentLabels.every(label => keepLabels.includes(label));
              
              if (!wouldChange) {
                console.log(`Labels already correct for issue #${issueNumber}, skipping update`);
                continue;
              }
              
              console.log(`Updating labels for issue #${issueNumber}`);
              console.log(`From: ${currentLabels.join(', ') || 'none'}`);
              console.log(`To: ${keepLabels.join(', ')}`);
              
              // Update the issue labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: keepLabels
              });
              
              console.log(`Successfully updated labels for issue #${issueNumber}`);
            }