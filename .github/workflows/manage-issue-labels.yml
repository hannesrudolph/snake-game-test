name: Manage Issue Labels

on:
  # Trigger when issues are labeled
  issues:
    types: [labeled]
  # Also run periodically to ensure consistency
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  # Manual trigger for testing
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  manage-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Process labels when an issue gets the "in-progress" label
        if: github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'in-progress'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            
            console.log(`Issue #${issueNumber} got labeled with "in-progress". Managing labels...`);
            
            // Get current labels
            const currentLabels = issue.labels.map(label => label.name);
            console.log(`Current labels: ${currentLabels.join(', ') || 'none'}`);
            
            // Filter to keep only "bug" label if present
            const keepLabels = currentLabels.filter(label => label === "bug" || label === "in-progress");
            
            // Add "documentation" label if not already present
            if (!keepLabels.includes("documentation")) {
              keepLabels.push("documentation");
            }
            
            // Skip if labels are unchanged
            if (currentLabels.length === keepLabels.length && 
                currentLabels.every(label => keepLabels.includes(label))) {
              console.log(`Labels already correct for issue #${issueNumber}, skipping update`);
              return;
            }
            
            console.log(`Updating labels for issue #${issueNumber} to: ${keepLabels.join(', ')}`);
            
            // Update issue with the new set of labels
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: keepLabels
            });
            
            console.log(`Successfully updated labels for issue #${issueNumber}`);

      - name: Scan for issues with "in-progress" label and manage their labels
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Scanning for issues with 'in-progress' label...");
            
            // Get all open issues with the "in-progress" label
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'in-progress'
            });
            
            console.log(`Found ${issues.length} issues with 'in-progress' label`);
            
            // Process each issue
            for (const issue of issues) {
              const issueNumber = issue.number;
              console.log(`\nProcessing issue #${issueNumber}: ${issue.title}`);
              
              // Skip pull requests
              if (issue.pull_request) {
                console.log(`Issue #${issueNumber} is a pull request, skipping`);
                continue;
              }
              
              // Get current labels
              const currentLabels = issue.labels.map(label => 
                typeof label === 'object' ? label.name : label
              );
              console.log(`Current labels: ${currentLabels.join(', ') || 'none'}`);
              
              // Filter to keep only "bug" label if present, and the "in-progress" label
              const keepLabels = currentLabels.filter(label => 
                label === "bug" || label === "in-progress"
              );
              
              // Add "documentation" label if not already present
              if (!keepLabels.includes("documentation")) {
                keepLabels.push("documentation");
              }
              
              // Skip if labels are unchanged
              if (currentLabels.length === keepLabels.length && 
                  currentLabels.every(label => keepLabels.includes(label))) {
                console.log(`Labels already correct for issue #${issueNumber}, skipping update`);
                continue;
              }
              
              console.log(`Updating labels for issue #${issueNumber} to: ${keepLabels.join(', ')}`);
              
              // Update issue with the new set of labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: keepLabels
              });
              
              console.log(`Successfully updated labels for issue #${issueNumber}`);
            }