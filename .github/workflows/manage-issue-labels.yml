name: Manage Issue Labels

on:
  workflow_dispatch:  # Manual trigger for testing
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes

# Add explicit permissions
permissions:
  contents: read
  issues: write

jobs:
  manage-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Find issues in "In Progress" and update labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Specific project details
            const projectOwner = 'hannesrudolph';
            const projectNumber = 5;  // From the URL: projects/5
            
            console.log(`Checking issues in project: https://github.com/users/${projectOwner}/projects/${projectNumber}`);
            
            // GraphQL query to get all issues in the specified project with "In Progress" status
            const query = `
              query GetProjectIssues($owner: String!, $projectNumber: Int!) {
                user(login: $owner) {
                  projectV2(number: $projectNumber) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                            labels(first: 20) {
                              nodes {
                                name
                              }
                            }
                          }
                        }
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              const result = await github.graphql(query, {
                owner: projectOwner,
                projectNumber: projectNumber
              });
              
              const projectItems = result.user.projectV2.items.nodes;
              console.log(`Found ${projectItems.length} items in the project`);
              
              // Process each item in the project
              for (const item of projectItems) {
                // Skip if not an issue
                if (!item.content || !item.content.number) {
                  continue;
                }
                
                const issue = item.content;
                const issueNumber = issue.number;
                const repoName = issue.repository.name;
                const repoOwner = issue.repository.owner.login;
                
                // Check if this item is in "In Progress" status
                let isInProgress = false;
                let statusFieldFound = false;
                
                for (const fieldValue of item.fieldValues.nodes) {
                  if (fieldValue.field && fieldValue.field.name) {
                    statusFieldFound = true;
                    // Check if this is the status field with "In Progress" value
                    if (fieldValue.name && fieldValue.name.toLowerCase() === 'in progress') {
                      isInProgress = true;
                      break;
                    }
                  }
                }
                
                if (!statusFieldFound) {
                  console.log(`No status field found for issue #${issueNumber}`);
                  continue;
                }
                
                console.log(`Issue #${issueNumber} in ${repoOwner}/${repoName} is in progress: ${isInProgress}`);
                
                // Skip if not in progress
                if (!isInProgress) {
                  continue;
                }
                
                // Get current labels
                const currentLabels = issue.labels.nodes.map(label => label.name);
                console.log(`Current labels for issue #${issueNumber}: ${currentLabels.join(', ')}`);
                
                // Filter to keep only "bug" label if present
                const keepLabels = currentLabels.filter(label => label === "bug");
                
                // Add "documentation" label if not already present
                if (!keepLabels.includes("documentation")) {
                  keepLabels.push("documentation");
                }
                
                // Skip if labels are unchanged
                if (currentLabels.length === keepLabels.length && 
                    currentLabels.every(label => keepLabels.includes(label))) {
                  console.log(`Labels already correct for issue #${issueNumber}, skipping update`);
                  continue;
                }
                
                console.log(`Updating labels for issue #${issueNumber} to: ${keepLabels.join(', ')}`);
                
                // Update issue with the new set of labels
                await github.rest.issues.update({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: issueNumber,
                  labels: keepLabels
                });
                
                console.log(`Successfully updated labels for issue #${issueNumber}`);
              }
            } catch (error) {
              console.error(`Error processing project items: ${error.message}`);
              console.error(error.stack);
            }