name: Manage Issue Labels

on:
  # Run periodically to check for issues in "In Progress"
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  # Manual trigger for testing
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  manage-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Projects and Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("================ DETAILED DEBUGGING MODE ================");
            
            // First try to list all available projects for the user
            try {
              const viewerQuery = `
                query {
                  viewer {
                    login
                    projectsV2(first: 10) {
                      nodes {
                        id
                        number
                        title
                        url
                        items(first: 5) {
                          nodes {
                            id
                            fieldValues(first: 10) {
                              nodes {
                                __typename
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const viewerResult = await github.graphql(viewerQuery);
              console.log("Authenticated user:", viewerResult.viewer.login);
              console.log("Available projects for viewer:");
              for (const project of viewerResult.viewer.projectsV2.nodes) {
                console.log(`- Project: ${project.title} (#${project.number})`);
                console.log(`  URL: ${project.url}`);
                console.log(`  ID: ${project.id}`);
                if (project.items.nodes.length > 0) {
                  console.log(`  Sample items: ${project.items.nodes.length}`);
                  for (const item of project.items.nodes) {
                    console.log(`    Item ID: ${item.id}`);
                    for (const fieldValue of item.fieldValues.nodes) {
                      if (fieldValue.__typename === 'ProjectV2ItemFieldSingleSelectValue') {
                        console.log(`      Field: ${fieldValue.field?.name || 'Unknown'}, Value: ${fieldValue.name}`);
                      } else {
                        console.log(`      Field type: ${fieldValue.__typename}`);
                      }
                    }
                  }
                } else {
                  console.log(`  No items found in sample`);
                }
              }
            } catch (error) {
              console.error("Error listing projects:", error.message);
            }
            
            // Try to list repositories for the authenticated user
            try {
              const { data: repos } = await github.rest.repos.listForAuthenticatedUser();
              console.log("Repositories accessible to workflow:");
              for (const repo of repos.slice(0, 5)) { // List first 5 repos for brevity
                console.log(`- ${repo.full_name}`);
              }
              if (repos.length > 5) {
                console.log(`... and ${repos.length - 5} more`);
              }
            } catch (error) {
              console.error("Error listing repositories:", error.message);
            }
            
            // Get issues for detailed inspection
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`\n============ FOUND ${issues.length} OPEN ISSUES ============\n`);
            
            for (const issue of issues) {
              const issueNumber = issue.number;
              
              // Skip pull requests
              if (issue.pull_request) {
                console.log(`Issue #${issueNumber} is a pull request, skipping`);
                continue;
              }
              
              console.log(`\n========== DETAILED DEBUG FOR ISSUE #${issueNumber}: ${issue.title} ==========`);
              console.log(`URL: ${issue.html_url}`);
              console.log(`State: ${issue.state}`);
              console.log(`Created: ${issue.created_at}`);
              console.log(`Updated: ${issue.updated_at}`);
              console.log(`Labels: ${issue.labels.map(l => l.name).join(', ') || 'None'}`);
              console.log(`Assignees: ${issue.assignees.map(a => a.login).join(', ') || 'None'}`);
              
              // Try to get projects v2 data for this issue
              try {
                const projectsQuery = `
                  query GetIssueProjects($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $number) {
                        projectItems(first: 20) {
                          nodes {
                            id
                            project {
                              id
                              number
                              title
                              url
                            }
                            fieldValues(first: 20) {
                              nodes {
                                __typename
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      id
                                      name
                                    }
                                  }
                                }
                                ... on ProjectV2ItemFieldTextValue {
                                  text
                                  field {
                                    ... on ProjectV2Field {
                                      id
                                      name
                                    }
                                  }
                                }
                                ... on ProjectV2ItemFieldDateValue {
                                  date
                                  field {
                                    ... on ProjectV2Field {
                                      id
                                      name
                                    }
                                  }
                                }
                                ... on ProjectV2ItemFieldIterationValue {
                                  title
                                  field {
                                    ... on ProjectV2IterationField {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                        projectCards(first: 20) {
                          nodes {
                            id
                            project {
                              id
                              name
                              url
                            }
                            column {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const projectsResult = await github.graphql(projectsQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: issueNumber
                });
                
                const projectItems = projectsResult.repository.issue.projectItems.nodes;
                console.log(`\nProjects V2 (${projectItems.length}):`);
                
                if (projectItems.length === 0) {
                  console.log("  Issue is not in any Projects V2");
                }
                
                for (const item of projectItems) {
                  console.log(`  Project: ${item.project.title} (#${item.project.number})`);
                  console.log(`  URL: ${item.project.url}`);
                  console.log(`  Fields:`);
                  
                  for (const field of item.fieldValues.nodes) {
                    if (field.__typename === 'ProjectV2ItemFieldSingleSelectValue') {
                      console.log(`    - ${field.field?.name || 'Unknown field'}: ${field.name}`);
                      
                      // Check if this is a status field with an "in progress" value
                      const fieldNameLower = (field.field?.name || '').toLowerCase();
                      const valueLower = field.name.toLowerCase();
                      
                      if (fieldNameLower.includes('status') || fieldNameLower === 'state') {
                        console.log(`      This is a status field. Value is "${field.name}"`);
                        if (['in progress', 'in-progress', 'inprogress', 'doing', 'active', 'started'].includes(valueLower)) {
                          console.log(`      >>> THIS MATCHES "IN PROGRESS" CRITERIA <<<`);
                        } else {
                          console.log(`      This doesn't match any "in progress" criteria`);
                        }
                      }
                    } else if (field.__typename === 'ProjectV2ItemFieldTextValue') {
                      console.log(`    - ${field.field?.name || 'Unknown field'} (text): ${field.text}`);
                    } else if (field.__typename === 'ProjectV2ItemFieldDateValue') {
                      console.log(`    - ${field.field?.name || 'Unknown field'} (date): ${field.date}`);
                    } else if (field.__typename === 'ProjectV2ItemFieldIterationValue') {
                      console.log(`    - ${field.field?.name || 'Unknown field'} (iteration): ${field.title}`);
                    } else {
                      console.log(`    - Unknown field type: ${field.__typename}`);
                    }
                  }
                }
                
                // Classic projects
                const projectCards = projectsResult.repository.issue.projectCards.nodes;
                console.log(`\nClassic Projects (${projectCards.length}):`);
                
                if (projectCards.length === 0) {
                  console.log("  Issue is not in any classic projects");
                }
                
                for (const card of projectCards) {
                  console.log(`  Project: ${card.project.name}`);
                  console.log(`  URL: ${card.project.url}`);
                  
                  if (card.column) {
                    console.log(`  Column: ${card.column.name}`);
                    
                    // Check if column name indicates "in progress"
                    const columnNameLower = card.column.name.toLowerCase();
                    if (['in progress', 'in-progress', 'inprogress', 'doing', 'active', 'started'].includes(columnNameLower)) {
                      console.log(`  >>> COLUMN MATCHES "IN PROGRESS" CRITERIA <<<`);
                    } else {
                      console.log(`  Column doesn't match any "in progress" criteria`);
                    }
                  } else {
                    console.log(`  No column information available`);
                  }
                }
                
              } catch (error) {
                console.error(`Error getting project data for issue #${issueNumber}: ${error.message}`);
                if (error.request) {
                  console.error(`Request: ${JSON.stringify(error.request)}`);
                }
              }
              
              console.log("\n"); // Add some spacing between issues
            }
            
            console.log("================ END DETAILED DEBUGGING ================");
            
            // For now, we're only doing debugging, not updating labels
            console.log("This is a debugging run - no labels will be modified");